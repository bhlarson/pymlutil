#!/usr/bin/python3

import os, sys
import shutil
import subprocess
import copy
import io
import json
import tempfile
import argparse
import time
from datetime import datetime
from zipfile import ZipFile

from sympy import re
from pymlutil.jsonutil import ReadDict, WriteDict

def parse_arguments():
    parser = argparse.ArgumentParser(description='Process arguments')

    parser.add_argument('--debug','-d', action='store_true',help='Wait for debuggee attach')   
    parser.add_argument('-debug_port', type=int, default=3300, help='Debug port')
    parser.add_argument('-debug_listen', type=str, default='0.0.0.0', help='Default, accept any client')

    parser.add_argument('-credentails', type=str, default='creds.yaml', help='Credentials file.')
    parser.add_argument('-config', type=str, default='config/build.yaml', help='Configuration file')
    parser.add_argument('-password', type=str, default=None, help='Output path')
    parser.add_argument('-timeout', type=str, default='2m0s', help='Version number')

    args = parser.parse_args()
    return args

def cmd(command):
    print('$ '+command)
    initial = datetime.now()
    result = subprocess.call(command, shell=True)
    dt = (datetime.now()-initial).total_seconds()
    print('Complete {}s: {}={}'.format(dt, result, command))
    return result

def Archive(args):
    result = 0

    config = ReadDict(args.config)
    config['version']['patch'] += 1

    version_str = '{}.{}.{}'.format(config['version']['major'], config['version']['minor'], config['version']['patch'])
    if config['version']['label'] is not None and len(config['version']['label']) > 0:
        version_str += '-{}'.format(config['version']['label'])

    WriteDict(config, args.config)

    cmdstr = 'git add {}'.format(args.config)
    result = cmd(cmdstr)
    if result != 0:
        return result

    cmdstr = 'git commit -m "Tag version {}"'.format(version_str)
    result = cmd(cmdstr)
    if result != 0:
        return result

    cmdstr = 'git diff-index --quiet HEAD --;'
    result = cmd(cmdstr)
    if result != 0:
        print ('Changes in working tree.  Please commit before creating a versioned repository.  Run "git status" for more information.')
        return result, config, version_str
    
    if args.description is None:
        description = "Machine learning workflow version {}".format(args.version)
    else:
        description = args.description
    cmdstr = 'git tag -a {} -m "{}"'.format(args.version,description )
    result = cmd(cmdstr)
    if result != 0:
        print ('Failed to create tag result={}. Aborting'.format(result))
        return result
    
    return result

def main(args):
    initial = datetime.now()

    creds = ReadDict(args.credentails)

    result, config, version_str = Archive(args)
    if result:
        return result

    print("Create pymlutil version: {}".format(version_str))

    pwd = os.getcwd()

    shutil.rmtree('dist/', ignore_errors=True)
    os.mkdir('dist/')

    cmdstr = "python3 setup.py sdist bdist_wheel"
    result = cmd(cmdstr)

    cmdstr = "twine upload dist/* -u {} -p {}".format(creds['pipy.org']['username'], creds['pipy.org']['password'])
    result = cmd(cmdstr)

    loaded_version = False
    while not loaded_version:
        time.sleep(5)
        cmdstr = "pip3 install --upgrade pymlutil"
        result = cmd(cmdstr)
        from pymlutil.version import __version__
        if __version__==version_str:
            loaded_version = True

    dt = (datetime.now()-initial).total_seconds()
    print("Setup version {} complete {}s".format(config['version'], dt))


if __name__ == '__main__':
    import argparse
    args = parse_arguments()

    if args.debug:
        print("Wait for debugger attach")
        import debugpy
        debugpy.listen(address=(args.debug_listen, args.debug_port))
        debugpy.wait_for_client() # Pause the program until a remote debugger is attached
        print("Debugger attached")

    result = main(args)
    sys.exit(result)